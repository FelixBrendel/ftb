#include <stdio.h>

#define FTB_CPU_INFO_IMPL
#include "../cpu_info.hpp"

auto print_full_cpu_info() -> void {
    Cpu_Info info;
    get_cpu_info(&info);
    printf("-------------------\n");
    printf("      CPU INFO     \n");
    printf("-------------------\n");
    printf("vendor:   %s\n", info.vendor);
    printf("brand:    %s\n", info.brand);
    printf("-------------------\n");
    printf("Edx_1_Feature_Flags\n");
    printf("-------------------\n");
    printf("fpu:                    %s  // Onboard x87 FPU\n",                                      query_cpu_feature(&info, Edx_1_Feature_Flags::fpu)    ? "yes" : "no ");
    printf("vme:                    %s  // Virtual 8086 mode extensions (such as VIF, VIP, PIV)\n", query_cpu_feature(&info, Edx_1_Feature_Flags::vme)    ? "yes" : "no ");
    printf("de:                     %s  // Debugging extensions (CR4 bit 3)\n",                     query_cpu_feature(&info, Edx_1_Feature_Flags::de)     ? "yes" : "no ");
    printf("pse:                    %s  // Page Size Extension\n",                                  query_cpu_feature(&info, Edx_1_Feature_Flags::pse)    ? "yes" : "no ");
    printf("tsc:                    %s  // Time Stamp Counter\n",                                   query_cpu_feature(&info, Edx_1_Feature_Flags::tsc)    ? "yes" : "no ");
    printf("msr:                    %s  // Model-specific registers\n",                             query_cpu_feature(&info, Edx_1_Feature_Flags::msr)    ? "yes" : "no ");
    printf("pae:                    %s  // Physical Address Extension\n",                           query_cpu_feature(&info, Edx_1_Feature_Flags::pae)    ? "yes" : "no ");
    printf("mce:                    %s  // Machine Check Exception\n",                              query_cpu_feature(&info, Edx_1_Feature_Flags::mce)    ? "yes" : "no ");
    printf("cx8:                    %s  // CMPXCHG8 (compare-and-swap) instruction\n",              query_cpu_feature(&info, Edx_1_Feature_Flags::cx8)    ? "yes" : "no ");
    printf("apic:                   %s  // Onboard Advanced Programmable Interrupt Controller\n",   query_cpu_feature(&info, Edx_1_Feature_Flags::apic)   ? "yes" : "no ");
    printf("_resv1:                 %s  // (reserved)\n",                                           query_cpu_feature(&info, Edx_1_Feature_Flags::_resv1) ? "yes" : "no ");
    printf("sep:                    %s  // SYSENTER and SYSEXIT instructions\n",                    query_cpu_feature(&info, Edx_1_Feature_Flags::sep)    ? "yes" : "no ");
    printf("mtrr:                   %s  // Memory Type Range Registers\n",                          query_cpu_feature(&info, Edx_1_Feature_Flags::mtrr)   ? "yes" : "no ");
    printf("pge:                    %s  // Page Global Enable bit in CR4\n",                        query_cpu_feature(&info, Edx_1_Feature_Flags::pge)    ? "yes" : "no ");
    printf("mca:                    %s  // Machine check architecture\n",                           query_cpu_feature(&info, Edx_1_Feature_Flags::mca)    ? "yes" : "no ");
    printf("cmov:                   %s  // Conditional move and FCMOV instructions\n",              query_cpu_feature(&info, Edx_1_Feature_Flags::cmov)   ? "yes" : "no ");
    printf("pat:                    %s  // Page Attribute Table\n",                                 query_cpu_feature(&info, Edx_1_Feature_Flags::pat)    ? "yes" : "no ");
    printf("pse_36:                 %s  // 36-bit page size extension\n",                           query_cpu_feature(&info, Edx_1_Feature_Flags::pse_36) ? "yes" : "no ");
    printf("psn:                    %s  // Processor Serial Number\n",                              query_cpu_feature(&info, Edx_1_Feature_Flags::psn)    ? "yes" : "no ");
    printf("clfsh:                  %s  // CLFLUSH instruction (SSE2)\n",                           query_cpu_feature(&info, Edx_1_Feature_Flags::clfsh)  ? "yes" : "no ");
    printf("_resv2:                 %s  // (reserved)\n",                                           query_cpu_feature(&info, Edx_1_Feature_Flags::_resv2) ? "yes" : "no ");
    printf("ds:                     %s  // Debug store: save trace of executed jumps\n",            query_cpu_feature(&info, Edx_1_Feature_Flags::ds)     ? "yes" : "no ");
    printf("acpi:                   %s  // Onboard thermal control MSRs for ACPI\n",                query_cpu_feature(&info, Edx_1_Feature_Flags::acpi)   ? "yes" : "no ");
    printf("mmx:                    %s  // MMX instructions\n",                                     query_cpu_feature(&info, Edx_1_Feature_Flags::mmx)    ? "yes" : "no ");
    printf("fxsr:                   %s  // FXSAVE, FXRESTOR instructions, CR4 bit 9\n",             query_cpu_feature(&info, Edx_1_Feature_Flags::fxsr)   ? "yes" : "no ");
    printf("sse:                    %s  // SSE instructions (a.k.a. Katmai New Instructions)\n",    query_cpu_feature(&info, Edx_1_Feature_Flags::sse)    ? "yes" : "no ");
    printf("sse2:                   %s  // SSE2 instructions\n",                                    query_cpu_feature(&info, Edx_1_Feature_Flags::sse2)   ? "yes" : "no ");
    printf("ss:                     %s  // CPU cache implements self-snoop\n",                      query_cpu_feature(&info, Edx_1_Feature_Flags::ss)     ? "yes" : "no ");
    printf("htt:                    %s  // Hyper-threading\n",                                      query_cpu_feature(&info, Edx_1_Feature_Flags::htt)    ? "yes" : "no ");
    printf("tm:                     %s  // Thermal monitor automatically limits temperature\n",     query_cpu_feature(&info, Edx_1_Feature_Flags::tm)     ? "yes" : "no ");
    printf("ia64:                   %s  // IA64 processor emulating x86\n",                         query_cpu_feature(&info, Edx_1_Feature_Flags::ia64)   ? "yes" : "no ");
    printf("pbe:                    %s  // Pending Break Enable (PBE# pin) wakeup capability\n",    query_cpu_feature(&info, Edx_1_Feature_Flags::pbe)    ? "yes" : "no ");
    printf("-------------------\n");
    printf("Ecx_1_Feature_Flags\n");
    printf("-------------------\n");
    printf("sse3:                   %s  // Prescott New Instructions-SSE3 (PNI)\n",                          query_cpu_feature(&info, Ecx_1_Feature_Flags::sse3)         ? "yes" : "no ");
    printf("pclmulqdq:              %s  // PCLMULQDQ\n",                                                     query_cpu_feature(&info, Ecx_1_Feature_Flags::pclmulqdq)    ? "yes" : "no ");
    printf("dtes64:                 %s  // 64-bit debug store (edx bit 21)\n",                               query_cpu_feature(&info, Ecx_1_Feature_Flags::dtes64)       ? "yes" : "no ");
    printf("monitor:                %s  // MONITOR and MWAIT instructions (SSE3)\n",                         query_cpu_feature(&info, Ecx_1_Feature_Flags::monitor)      ? "yes" : "no ");
    printf("ds_cpl:                 %s  // CPL qualified debug store\n",                                     query_cpu_feature(&info, Ecx_1_Feature_Flags::ds_cpl)       ? "yes" : "no ");
    printf("vmx:                    %s  // Virtual Machine eXtensions\n",                                    query_cpu_feature(&info, Ecx_1_Feature_Flags::vmx)          ? "yes" : "no ");
    printf("smx:                    %s  // Safer Mode Extensions (LaGrande)\n",                              query_cpu_feature(&info, Ecx_1_Feature_Flags::smx)          ? "yes" : "no ");
    printf("est:                    %s  // Enhanced SpeedStep\n",                                            query_cpu_feature(&info, Ecx_1_Feature_Flags::est)          ? "yes" : "no ");
    printf("tm2:                    %s  // Thermal Monitor 2\n",                                             query_cpu_feature(&info, Ecx_1_Feature_Flags::tm2)          ? "yes" : "no ");
    printf("ssse3:                  %s  // Supplemental SSE3 instructions\n",                                query_cpu_feature(&info, Ecx_1_Feature_Flags::ssse3)        ? "yes" : "no ");
    printf("cnxt_id:                %s  // L1 Context ID\n",                                                 query_cpu_feature(&info, Ecx_1_Feature_Flags::cnxt_id)      ? "yes" : "no ");
    printf("sdbg:                   %s  // Silicon Debug interface\n",                                       query_cpu_feature(&info, Ecx_1_Feature_Flags::sdbg)         ? "yes" : "no ");
    printf("fma:                    %s  // Fused multiply-add (FMA3)\n",                                     query_cpu_feature(&info, Ecx_1_Feature_Flags::fma)          ? "yes" : "no ");
    printf("cx16:                   %s  // CMPXCHG16B instruction\n",                                        query_cpu_feature(&info, Ecx_1_Feature_Flags::cx16)         ? "yes" : "no ");
    printf("xtpr:                   %s  // Can disable sending task priority messages\n",                    query_cpu_feature(&info, Ecx_1_Feature_Flags::xtpr)         ? "yes" : "no ");
    printf("pdcm:                   %s  // Perfmon & debug capability\n",                                    query_cpu_feature(&info, Ecx_1_Feature_Flags::pdcm)         ? "yes" : "no ");
    printf("_resv1:                 %s  // (reserved)\n",                                                    query_cpu_feature(&info, Ecx_1_Feature_Flags::_resv1)       ? "yes" : "no ");
    printf("pcid:                   %s  // Process context identifiers (CR4 bit 17)\n",                      query_cpu_feature(&info, Ecx_1_Feature_Flags::pcid)         ? "yes" : "no ");
    printf("dca:                    %s  // Direct cache access for DMA writes\n",                            query_cpu_feature(&info, Ecx_1_Feature_Flags::dca)          ? "yes" : "no ");
    printf("sse4_1:                 %s  // SSE4.1 instructions\n",                                           query_cpu_feature(&info, Ecx_1_Feature_Flags::sse4_1)       ? "yes" : "no ");
    printf("sse4_2:                 %s  // SSE4.2 instructions\n",                                           query_cpu_feature(&info, Ecx_1_Feature_Flags::sse4_2)       ? "yes" : "no ");
    printf("x2apic:                 %s  // x2APIC\n",                                                        query_cpu_feature(&info, Ecx_1_Feature_Flags::x2apic)       ? "yes" : "no ");
    printf("movbe:                  %s  // MOVBE instruction (big-endian)\n",                                query_cpu_feature(&info, Ecx_1_Feature_Flags::movbe)        ? "yes" : "no ");
    printf("popcnt:                 %s  // POPCNT instruction\n",                                            query_cpu_feature(&info, Ecx_1_Feature_Flags::popcnt)       ? "yes" : "no ");
    printf("tsc_deadline:           %s  // APIC implements one-shot operation using a TSC deadline value\n", query_cpu_feature(&info, Ecx_1_Feature_Flags::tsc_deadline) ? "yes" : "no ");
    printf("aes:                    %s  // AES instruction set\n",                                           query_cpu_feature(&info, Ecx_1_Feature_Flags::aes)          ? "yes" : "no ");
    printf("xsave:                  %s  // XSAVE, XRESTOR, XSETBV, XGETBV\n",                                query_cpu_feature(&info, Ecx_1_Feature_Flags::xsave)        ? "yes" : "no ");
    printf("osxsave:                %s  // XSAVE enabled by OS\n",                                           query_cpu_feature(&info, Ecx_1_Feature_Flags::osxsave)      ? "yes" : "no ");
    printf("avx:                    %s  // Advanced Vector Extensions\n",                                    query_cpu_feature(&info, Ecx_1_Feature_Flags::avx)          ? "yes" : "no ");
    printf("f16c:                   %s  // F16C (half-precision) FP feature\n",                              query_cpu_feature(&info, Ecx_1_Feature_Flags::f16c)         ? "yes" : "no ");
    printf("rdrnd:                  %s  // RDRAND (on-chip random number generator) feature\n",              query_cpu_feature(&info, Ecx_1_Feature_Flags::rdrnd)        ? "yes" : "no ");
    printf("hypervisor:             %s  // Hypervisor present (always zero on physical CPUs)\n",             query_cpu_feature(&info, Ecx_1_Feature_Flags::hypervisor)   ? "yes" : "no ");
    printf("----------------------------\n");
    printf("Ebx_7_Extended_Feature_Flags\n");
    printf("----------------------------\n");
    printf("fsgsbase:               %s  // Access to base of %%fs and %%gs\n",                              query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::fsgsbase)    ? "yes" : "no ");
    printf("_idk1:                  %s  //\n",                                                              query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::_idk1)       ? "yes" : "no ");
    printf("sgx:                    %s  // Software Guard Extensions\n",                                    query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::sgx)         ? "yes" : "no ");
    printf("bmi1:                   %s  // Bit Manipulation Instruction Set 1\n",                           query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::bmi1)        ? "yes" : "no ");
    printf("hle:                    %s  // TSX Hardware Lock Elision\n",                                    query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::hle)         ? "yes" : "no ");
    printf("avx2:                   %s  // Advanced Vector Extensions 2\n",                                 query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx2)        ? "yes" : "no ");
    printf("_idk2:                  %s  //\n",                                                              query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::_idk2)       ? "yes" : "no ");
    printf("smep:                   %s  // Supervisor Mode Execution Prevention\n",                         query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::smep)        ? "yes" : "no ");
    printf("bmi2:                   %s  // Bit Manipulation Instruction Set 2\n",                           query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::bmi2)        ? "yes" : "no ");
    printf("erms:                   %s  // Enhanced REP MOVSB/STOSB\n",                                     query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::erms)        ? "yes" : "no ");
    printf("invpcid:                %s  // INVPCID instruction\n",                                          query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::invpcid)     ? "yes" : "no ");
    printf("rtm:                    %s  // TSX Restricted Transactional Memory\n",                          query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::rtm)         ? "yes" : "no ");
    printf("pqm:                    %s  // Platform Quality of Service Monitoring\n",                       query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::pqm)         ? "yes" : "no ");
    printf("_idk3:                  %s  //\n",                                                              query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::_idk3)       ? "yes" : "no ");
    printf("mpx:                    %s  // Intel MPX (Memory Protection Extensions)\n",                     query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::mpx)         ? "yes" : "no ");
    printf("pqe:                    %s  // Platform Quality of Service Enforcement\n",                      query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::pqe)         ? "yes" : "no ");
    printf("avx512_f:               %s  // AVX-512 Foundation\n",                                           query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_f)    ? "yes" : "no ");
    printf("avx512_dq:              %s  // AVX-512 Doubleword and Quadword Instructions\n",                 query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_dq)   ? "yes" : "no ");
    printf("rdseed:                 %s  // RDSEED instruction\n",                                           query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::rdseed)      ? "yes" : "no ");
    printf("adx:                    %s  // Intel ADX (Multi-Precision Add-Carry Instruction Extensions)\n", query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::adx)         ? "yes" : "no ");
    printf("smap:                   %s  // Supervisor Mode Access Prevention\n",                            query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::smap)        ? "yes" : "no ");
    printf("avx512_ifma:            %s  // AVX-512 Integer Fused Multiply-Add Instructions\n",              query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_ifma) ? "yes" : "no ");
    printf("pcommit:                %s  // PCOMMIT instruction\n",                                          query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::pcommit)     ? "yes" : "no ");
    printf("clflushopt:             %s  // CLFLUSHOPT instruction\n",                                       query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::clflushopt)  ? "yes" : "no ");
    printf("clwb:                   %s  // CLWB instruction\n",                                             query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::clwb)        ? "yes" : "no ");
    printf("intel_pt:               %s  // Intel Processor Trace\n",                                        query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::intel_pt)    ? "yes" : "no ");
    printf("avx512_pf:              %s  // AVX-512 Prefetch Instructions\n",                                query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_pf)   ? "yes" : "no ");
    printf("avx512_er:              %s  // AVX-512 Exponential and Reciprocal Instructions\n",              query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_er)   ? "yes" : "no ");
    printf("avx512_cd:              %s  // AVX-512 Conflict Detection Instructions\n",                      query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_cd)   ? "yes" : "no ");
    printf("sha:                    %s  // Intel SHA extensions\n",                                         query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::sha)         ? "yes" : "no ");
    printf("avx512_bw:              %s  // AVX-512 Byte and Word Instructions\n",                           query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_bw)   ? "yes" : "no ");
    printf("avx512_vl:              %s  // AVX-512 Vector Length Extensions\n",                             query_cpu_feature(&info, Ebx_7_Extended_Feature_Flags::avx512_vl)   ? "yes" : "no ");
    printf("----------------------------\n");
    printf("Ecx_7_Extended_Feature_Flags\n");
    printf("----------------------------\n");
    printf("prefetchwt1:            %s   // PREFETCHWT1 instruction\n",                                  query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::prefetchwt1)     ? "yes" : "no ");
    printf("avx512_vbmi:            %s   // AVX-512 Vector Bit Manipulation Instructions\n",             query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::avx512_vbmi)     ? "yes" : "no ");
    printf("umip:                   %s   // User-mode Instruction Prevention\n",                         query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::umip)            ? "yes" : "no ");
    printf("pku:                    %s   // Memory Protection Keys for User-mode pages\n",               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::pku)             ? "yes" : "no ");
    printf("ospke:                  %s   // PKU enabled by OS\n",                                        query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::ospke)           ? "yes" : "no ");
    printf("waitpkg:                %s   // Timed pause and user-level monitor/wait\n",                  query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::waitpkg)         ? "yes" : "no ");
    printf("avx512_vbmi2:           %s   // AVX-512 Vector Bit Manipulation Instructions 2\n",           query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::avx512_vbmi2)    ? "yes" : "no ");
    printf("cet_ss:                 %s   // Control flow enforcement (CET) shadow stack\n",              query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::cet_ss)          ? "yes" : "no ");
    printf("gfni:                   %s   // Galois Field instructions\n",                                query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::gfni)            ? "yes" : "no ");
    printf("vaes:                   %s   // Vector AES instruction set (VEX-256/EVEX)\n",                query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::vaes)            ? "yes" : "no ");
    printf("vpclmulqdq:             %s   // CLMUL instruction set (VEX-256/EVEX)\n",                     query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::vpclmulqdq)      ? "yes" : "no ");
    printf("avx512_vnni:            %s   // AVX-512 Vector Neural Network Instructions\n",               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::avx512_vnni)     ? "yes" : "no ");
    printf("avx512_bitalg:          %s   // AVX-512 BITALG instructions\n",                              query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::avx512_bitalg)   ? "yes" : "no ");
    printf("_resv1:                 %s   // (reserved)\n",                                               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::_resv1)          ? "yes" : "no ");
    printf("avx512_vpopcntdq:       %s   // AVX-512 Vector Population Count Double and Quad-word\n",     query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::avx512_vpopcntdq)? "yes" : "no ");
    printf("_resv2:                 %s   // (reserved)\n",                                               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::_resv2)          ? "yes" : "no ");
    printf("intel_5lp:              %s   // 5-level paging\n",                                           query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::intel_5lp)       ? "yes" : "no ");
    printf("mawau1:                 %s   // The value of userspace MPX Address-Width Adjust used ...\n", query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::mawau1)          ? "yes" : "no ");
    printf("mawau2:                 %s   // ... by the BNDLDX and BNDSTX Intel MPX instructions  ...\n", query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::mawau2)          ? "yes" : "no ");
    printf("mawau3:                 %s   // ... in 64-bit mode\n",                                       query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::mawau3)          ? "yes" : "no ");
    printf("mawau4:                 %s   //\n",                                                          query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::mawau4)          ? "yes" : "no ");
    printf("mawau5:                 %s   //\n",                                                          query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::mawau5)          ? "yes" : "no ");
    printf("rdpid:                  %s   // Read Processor ID and IA32_TSC_AUX\n",                       query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::rdpid)           ? "yes" : "no ");
    printf("_resv3:                 %s   // (reserved)\n",                                               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::_resv3)          ? "yes" : "no ");
    printf("_resv4:                 %s   // (reserved)\n",                                               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::_resv4)          ? "yes" : "no ");
    printf("cldemote:               %s   // Cache line demote\n",                                        query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::cldemote)        ? "yes" : "no ");
    printf("_resv5:                 %s   // (reserved)\n",                                               query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::_resv5)          ? "yes" : "no ");
    printf("movdiri:                %s   //\n",                                                          query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::movdiri)         ? "yes" : "no ");
    printf("movdir64b:              %s   //\n",                                                          query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::movdir64b)       ? "yes" : "no ");
    printf("enqcmd:                 %s   // Enqueue Stores\n",                                           query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::enqcmd)          ? "yes" : "no ");
    printf("sgx_lc:                 %s   // SGX Launch Configuration\n",                                 query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::sgx_lc)          ? "yes" : "no ");
    printf("pks:                    %s   // Protection keys for supervisor-mode pages\n",                query_cpu_feature(&info, Ecx_7_Extended_Feature_Flags::pks)             ? "yes" : "no ");
    printf("----------------------------\n");
    printf("Edx_7_Extended_Feature_Flags\n");
    printf("----------------------------\n");
    printf("_resv1:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv1)                 ? "yes" : "no ");
    printf("_resv2:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv2)                 ? "yes" : "no ");
    printf("avx512_4vnniw:          %s  // AVX-512 4-register Neural Network Instructions\n",                                                                                                          query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::avx512_4vnniw)          ? "yes" : "no ");
    printf("avx512_4fmaps:          %s  // AVX-512 4-register Multiply Accumulation Single precision\n",                                                                                               query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::avx512_4fmaps)          ? "yes" : "no ");
    printf("fsrm:                   %s  // Fast Short REP MOVSB\n",                                                                                                                                    query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::fsrm)                   ? "yes" : "no ");
    printf("_resv3:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv3)                 ? "yes" : "no ");
    printf("_resv4:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv4)                 ? "yes" : "no ");
    printf("_resv5:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv5)                 ? "yes" : "no ");
    printf("avx512_vp2intersect:    %s  // AVX-512 VP2INTERSECT Doubleword and Quadword Instructions\n",                                                                                               query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::avx512_vp2intersect)    ? "yes" : "no ");
    printf("SRBDS_CTRL:             %s  // Special Register Buffer Data Sampling Mitigations\n",                                                                                                       query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::SRBDS_CTRL)             ? "yes" : "no ");
    printf("md_clear:               %s  // VERW instruction clears CPU buffers\n",                                                                                                                     query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::md_clear)               ? "yes" : "no ");
    printf("_resv6:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv6)                 ? "yes" : "no ");
    printf("_resv7:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv7)                 ? "yes" : "no ");
    printf("tsx_force_abort:        %s  //\n",                                                                                                                                                         query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::tsx_force_abort)        ? "yes" : "no ");
    printf("serialize:              %s  // Serialize instruction execution\n",                                                                                                                         query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::serialize)              ? "yes" : "no ");
    printf("hybrid:                 %s  //\n",                                                                                                                                                         query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::hybrid)                 ? "yes" : "no ");
    printf("TSXLDTRK:               %s  // TSX suspend load address tracking\n",                                                                                                                       query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::TSXLDTRK)               ? "yes" : "no ");
    printf("_resv8:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv8)                 ? "yes" : "no ");
    printf("pconfig:                %s  // Platform configuration (Memory Encryption Technologies Instructions)\n",                                                                                    query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::pconfig)                ? "yes" : "no ");
    printf("lbr:                    %s  // Architectural Last Branch Records\n",                                                                                                                       query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::lbr)                    ? "yes" : "no ");
    printf("cet_ibt:                %s  // Control flow enforcement (CET) indirect branch tracking\n",                                                                                                 query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::cet_ibt)                ? "yes" : "no ");
    printf("_resv9:                 %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv9)                 ? "yes" : "no ");
    printf("amx_bf16:               %s  // Tile computation on bfloat16 numbers\n",                                                                                                                    query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::amx_bf16)               ? "yes" : "no ");
    printf("_resv10:                %s  // (reserved)\n",                                                                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::_resv10)                ? "yes" : "no ");
    printf("amx_tile:               %s  // Tile architecture\n",                                                                                                                                       query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::amx_tile)               ? "yes" : "no ");
    printf("amx_int8:               %s  // Tile computation on 8-bit integers\n",                                                                                                                      query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::amx_int8)               ? "yes" : "no ");
    printf("spec_ctrl:              %s  // Speculation Control, part of Indirect Branch Control (IBC): Indirect Branch Restricted Speculation (IBRS) and Indirect Branch Prediction Barrier (IBPB)\n", query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::spec_ctrl)              ? "yes" : "no ");
    printf("stibp:                  %s  // Single Thread Indirect Branch Predictor, part of IBC\n",                                                                                                    query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::stibp)                  ? "yes" : "no ");
    printf("l1d_flush:              %s  // IA32_FLUSH_CMD MSR\n",                                                                                                                                      query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::l1d_flush)              ? "yes" : "no ");
    printf("ia32_arch_capabilities: %s  // Speculative Side Channel Mitigations\n",                                                                                                                    query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::ia32_arch_capabilities) ? "yes" : "no ");
    printf("ia32_core_capabilities: %s  // Support for a MSR listing model-specific core capabilities\n",                                                                                              query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::ia32_core_capabilities) ? "yes" : "no ");
    printf("ssbd:                   %s  // Speculative Store Bypass Disable, as mitigation for Speculative Store Bypass (IA32_SPEC_CTRL)\n",                                                           query_cpu_feature(&info, Edx_7_Extended_Feature_Flags::ssbd)                   ? "yes" : "no ");
    printf("-----------------------------\n");
    printf("Ebx_81_Extended_Feature_Flags\n");
    printf("-----------------------------\n");
    printf("syscall:                %s  // SYSCALL and SYSRET instructions\n", query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::syscall)       ? "yes" : "no ");
    printf("mp:                     %s  // Multiprocessor Capable\n",          query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::mp)            ? "yes" : "no ");
    printf("nx:                     %s  // NX (no-execute) bit\n",             query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::nx)            ? "yes" : "no ");
    printf("mmxext:                 %s  // Extended MMX\n",                    query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::mmxext)        ? "yes" : "no ");
    printf("fxsr_opt:               %s  // FXSAVE/FXRSTOR optimizations\n",    query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::fxsr_opt)      ? "yes" : "no ");
    printf("pdpe1gb:                %s  // Gibibyte pages\n",                  query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::pdpe1gb)       ? "yes" : "no ");
    printf("rdtscp:                 %s  // RDTSCP instruction\n",              query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::rdtscp)        ? "yes" : "no ");
    printf("l1d_flush:              %s  // IA32_FLUSH_CMD MSR\n",              query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::l1d_flush)     ? "yes" : "no ");
    printf("lm:                     %s  // Long mode\n",                       query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::lm)            ? "yes" : "no ");
    printf("_3dnowext:              %s  // Extended 3DNow!\n",                 query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::_3dnowext)     ? "yes" : "no ");
    printf("_3dnow:                 %s  // 3DNow!\n",                          query_cpu_feature(&info, Edx_81_Extended_Feature_Flags::_3dnow)        ? "yes" : "no ");
    printf("-----------------------------\n");
    printf("Ecx_81_Extended_Feature_Flags\n");
    printf("-----------------------------\n");
    printf("lahf_lm:                %s  // LAHF/SAHF in long mode\n",                       query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::lahf_lm)        ? "yes" : "no ");
    printf("cmp_legacy:             %s  // Hyperthreading not valid\n",                     query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::cmp_legacy)     ? "yes" : "no ");
    printf("svm:                    %s  // Secure Virtual Machine\n",                       query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::svm)            ? "yes" : "no ");
    printf("extapic:                %s  // Extended APIC space\n",                          query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::extapic)        ? "yes" : "no ");
    printf("cr8_legacy:             %s  // CR8 in 32-bit mode\n",                           query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::cr8_legacy)     ? "yes" : "no ");
    printf("abm:                    %s  // Advanced bit manipulation (lzcnt and popcnt)\n", query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::abm)            ? "yes" : "no ");
    printf("sse4a:                  %s  // SSE4a\n",                                        query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::sse4a)          ? "yes" : "no ");
    printf("misalignsse:            %s  // Misaligned SSE mode\n",                          query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::misalignsse)    ? "yes" : "no ");
    printf("_3dnowprefetch:         %s  // PREFETCH and PREFETCHW instructions\n",          query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_3dnowprefetch) ? "yes" : "no ");
    printf("osvw:                   %s  // OS Visible Workaround\n",                        query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::osvw)           ? "yes" : "no ");
    printf("ibs:                    %s // Instruction Based Sampling\n",                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::ibs)            ? "yes" : "no ");
    printf("xop:                    %s // XOP instruction set\n",                           query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::xop)            ? "yes" : "no ");
    printf("skinit:                 %s // SKINIT/STGI instructions\n",                      query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::skinit)         ? "yes" : "no ");
    printf("wdt:                    %s // Watchdog timer\n",                                query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::wdt)            ? "yes" : "no ");
    printf("_resv1:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv1)         ? "yes" : "no ");
    printf("lwp:                    %s // Light Weight Profiling\n",                        query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::lwp)            ? "yes" : "no ");
    printf("fma4:                   %s // 4 operands fused multiply-add\n",                 query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::fma4)           ? "yes" : "no ");
    printf("tce:                    %s // Translation Cache Extension\n",                   query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::tce)            ? "yes" : "no ");
    printf("_resv2:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv2)         ? "yes" : "no ");
    printf("nodeid_msr:             %s // NodeID MSR\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::nodeid_msr)     ? "yes" : "no ");
    printf("_resv3:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv3)         ? "yes" : "no ");
    printf("tbm:                    %s // Trailing Bit Manipulation\n",                     query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::tbm)            ? "yes" : "no ");
    printf("topoext:                %s // opology Extensions\n",                            query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::topoext)        ? "yes" : "no ");
    printf("perfctr_core:           %s // Core performance counter extensions\n",           query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::perfctr_core)   ? "yes" : "no ");
    printf("perfctr_nb:             %s // NB performance counter extensions\n",             query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::perfctr_nb)     ? "yes" : "no ");
    printf("_resv4:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv4)         ? "yes" : "no ");
    printf("dbx:                    %s // Data breakpoint extensions\n",                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::dbx)            ? "yes" : "no ");
    printf("perftsc:                %s // Performance TSC\n",                               query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::perftsc)        ? "yes" : "no ");
    printf("pcx_l2i:                %s // L2I perf counter extensions\n",                   query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::pcx_l2i)        ? "yes" : "no ");
    printf("_resv5:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv5)         ? "yes" : "no ");
    printf("_resv6:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv6)         ? "yes" : "no ");
    printf("_resv7:                 %s // (reserved)\n",                                    query_cpu_feature(&info, Ecx_81_Extended_Feature_Flags::_resv7)         ? "yes" : "no ");
}

int main() {
    print_full_cpu_info();
}
